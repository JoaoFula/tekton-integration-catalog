---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: deploy-konflux-ci
  labels:
    konflux-ci/kind: "true"
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/pipelines.minVersion: "0.44.x"
    tekton.dev/tags: konflux
spec:
  description: |
    This task performs a full Konflux CI deployment. It clones the specified Git repository,
    checks out the desired branch, and runs deployment scripts using a kubeconfig retrieved from
    a Kubernetes secret. It is intended for use in OpenShift Pipelines or other Tekton environments.

  params:
    - name: cluster-access-secret
      description: Name of the Kubernetes Secret that contains the kubeconfig (base64 encoded) used to access the target cluster.
    - name: repo-url
      description: URL of the Git repository containing the Konflux CI deployment scripts.
      default: https://github.com/konflux-ci/konflux-ci.git
    - name: repo-branch
      description: Git branch to check out when cloning the repository.
      default: main
    - name: create-test-resources
      description: 'Indicates if a set of test resources should be installed'
      default: 'true'
    - name: component-name
      description: |
        The GitHub repository name of the Konflux CI component to customize (e.g., `build-service`, `release-service`).
        Used for applying image or Kubernetes manifest overrides.
      default: ''
    - name: component-image-repository
      description: |
        Overrides the container image repository for the `component-name` (e.g., `quay.io/my-org/my-custom-image`).
      default: ''
    - name: component-image-tag
      description: |
        Overrides the container image tag for the `component-name` (e.g., `latest`, `my-feature-branch`).
      default: ''
    - name: component-pr-owner
      description: |
        GitHub owner (user|org) of the fork/PR providing custom Kubernetes manifests for the `component-name`.
      default: ''
    - name: component-pr-sha
      description: |
        Commit SHA of the PR (from `component-pr-owner`) supplying custom Kubernetes manifests for the `component-name`.
      default: ''
    - name: component-pr-source-branch
      description: |
        GitHub source branch of the pull request.
      default: ''

  volumes:
    - name: credentials
      secret:
        secretName: $(params.cluster-access-secret)
    - name: workdir
      emptyDir: {}

  stepTemplate:
    env:
      - name: KUBECONFIG
        value: '/credentials/kubeconfig'
    volumeMounts:
      - name: credentials
        mountPath: /credentials
      - name: workdir
        mountPath: /var/workdir

  steps:
    - name: clone-konflux-ci
      image: quay.io/openshift-pipeline/pipelines-git-init-rhel9@sha256:7eee14366c516d92cf7480c9bc256cf0e544bf06da5d46ffb5e8bfe3e448326c
      workingDir: /var/workdir
      securityContext:
        runAsUser: 0
      args:
        - -url=$(params.repo-url)
        - -revision=$(params.repo-branch)
        - -path=.
    - name: solve-pr-pairing
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      when:
        - input: "$(params.component-name)"
          operator: notin
          values: [ "" ]
      script: |
        #!/bin/bash
        set -euo pipefail

        PR_SOURCE_BRANCH=$(params.component-pr-source-branch)
        COMPONENT_NAME="$(params.component-name)"
        PR_AUTHOR=$(params.component-pr-owner)

        RELEASE_SERVICE_REPO="konflux-ci/release-service"
        INFRA_DEPLOYMENTS_REPO="redhat-appstudio/infra-deployments"

        if [[ $COMPONENT_NAME == "release-service-catalog" || $COMPONENT_NAME == "release-service" ]]; then
          IMAGE_REPO=quay.io/redhat-user-workloads/rhtap-release-2-tenant/release-service/release-service

          if [[ $COMPONENT_NAME == "release-service-catalog" ]]; then
            echo "[INFO] Component is 'release-service-catalog'. Checking for paired PR in '$RELEASE_SERVICE_REPO'..."
            PR_TO_PAIR=$(curl -s https://api.github.com/repos/konflux-ci/release-service/pulls\?per_page\=100 | jq -r ".[] | select(.user.login == \"$PR_AUTHOR\" and .head.ref == \"$PR_SOURCE_BRANCH\")")

            if [ -n "$PR_TO_PAIR" ]; then
              PAIRED_PR_SHA=$(jq -r '.head.sha' <<< $PR_TO_PAIR)
              echo "[INFO] Found paired PR for $RELEASE_SERVICE_REPO. SHA: $PAIRED_PR_SHA"

              mkdir -p /var/workdir/
              echo "COMPONENT_NAME=release-service" >> /var/workdir/.env
              echo "IMAGE_REPO=$IMAGE_REPO" >> /var/workdir/.env
              echo "IMAGE_TAG=on-pr-$PAIRED_PR_SHA" >> /var/workdir/.env
              echo "PR_OWNER=$PR_AUTHOR" >> /var/workdir/.env
              echo "PR_SHA=$PAIRED_PR_SHA" >> /var/workdir/.env
            else
              echo "No paired PR found for $RELEASE_SERVICE_REPO by $PR_AUTHOR on branch $PR_SOURCE_BRANCH. No .env variables will be created."
            fi
          elif [[ $COMPONENT_NAME == "release-service" ]]; then
            echo "[INFO] Component is 'release-service'. Setting up required env vars..."
            mkdir -p /var/workdir/
            echo "COMPONENT_NAME=release-service" >> /var/workdir/.env
            echo "IMAGE_REPO=$IMAGE_REPO" >> /var/workdir/.env
            echo "IMAGE_TAG=on-pr-$(params.component-pr-sha)" >> /var/workdir/.env
            echo "PR_OWNER=$PR_AUTHOR" >> /var/workdir/.env
            echo "PR_SHA=$(params.component-pr-sha)" >> /var/workdir/.env

            echo "[INFO] Env vars for 'release-service' are set:"
            cat /var/workdir/.env
          fi

          echo "[INFO] Checking for paired PR in '$INFRA_DEPLOYMENTS_REPO'..."
          PR_TO_PAIR=$(curl -s https://api.github.com/repos/redhat-appstudio/infra-deployments/pulls\?per_page\=100 | jq -r ".[] | select(.user.login == \"$PR_AUTHOR\" and .head.ref == \"$PR_SOURCE_BRANCH\")")
          REMOTE_NAME=redhat-appstudio
          GIT_REF=main

          if [ -n "$PR_TO_PAIR" ]; then
            REMOTE_NAME=$PR_AUTHOR
            GIT_REF=$(jq -r '.head.sha' <<< $PR_TO_PAIR)
            echo "[INFO] Found paired PR for $INFRA_DEPLOYMENTS_REPO. Configuration files will be fetched from SHA: $GIT_REF (from user: $REMOTE_NAME)."
          else
            echo "[INFO] No paired PR found for $INFRA_DEPLOYMENTS_REPO by $PR_AUTHOR on branch $PR_SOURCE_BRANCH. Configuration files will be fetched from '$GIT_REF' branch."
          fi
          
          # Update 'release-service-config' and 'release-pipeline-resources-clusterrole' with content from infra-deployments manifests
          echo "[INFO] Downloading release_service_config.yaml..."
          curl https://raw.githubusercontent.com/$REMOTE_NAME/infra-deployments/$GIT_REF/components/release/development/release_service_config.yaml > konflux-ci/release/core/release-service-config.yaml
          echo "[INFO] Downloading release-pipeline-resources-clusterrole.yaml..."
          curl https://raw.githubusercontent.com/$REMOTE_NAME/infra-deployments/$GIT_REF/components/release/base/release-pipeline-resources-clusterrole.yaml > konflux-ci/release/core/release-pipeline-resources-clusterrole.yaml

          echo "[INFO] Configuration files updated successfully."
        fi

        

    - name: update-kustomization
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      when:
        - input: "$(params.component-name)"
          operator: notin
          values: [ "" ]
      script: |
        #!/bin/bash
        set -euo pipefail

        if [ -f /var/workdir/.env ]; then
          echo "[INFO] Loading env vars from /var/workdir/.env:"
          cat /var/workdir/.env

          source /var/workdir/.env
        else
          echo "[INFO] Loading env vars from parameters"

          COMPONENT_NAME="$(params.component-name)"
          IMAGE_REPO="$(params.component-image-repository)"
          IMAGE_TAG="$(params.component-image-tag)"
          PR_OWNER="$(params.component-pr-owner)"
          PR_SHA="$(params.component-pr-sha)"
        fi

        # Repo names do not match the ones of the component. Try to find the right kustomization.yaml based on the component name.
        KUSTOMIZATION_PATH=$(find konflux-ci/ -type f -name "kustomization.yaml" -path "*${COMPONENT_NAME%-service}*/core/*" | head -n 1)

        # Check if the file exists
        if [[ ! -f "${KUSTOMIZATION_PATH}" ]]; then
          echo "[WARNING] No substitutions will be applied as the kustomization file for $(params.component-name) has not been found."
          exit 0
        fi

        # Apply substitutions
        if [[ -n "$IMAGE_REPO" ]]; then
          echo "[INFO] Updating image repository to $IMAGE_REPO"
          yq -i e "(.images.[] | select(.name==\"quay.io/konflux-ci/${COMPONENT_NAME}\")) |= .newName=\"${IMAGE_REPO}\"" "$KUSTOMIZATION_PATH"
        fi

        if [[ -n "$IMAGE_TAG" ]]; then
          echo "[INFO] Updating image tag to $IMAGE_TAG"
          yq -i e "(.images.[] | select(.name==\"quay.io/konflux-ci/${COMPONENT_NAME}\")) |= .newTag=\"${IMAGE_TAG}\"" "$KUSTOMIZATION_PATH"
        fi

        if [[ -n "$PR_OWNER" && -n "$PR_SHA" ]]; then
          echo "[INFO] Updating GitHub reference to $PR_OWNER@$PR_SHA"
          yq -i e "(.resources[] | select(. ==\"*github.com/konflux-ci/${COMPONENT_NAME}/config/default*\")) |= \"https://github.com/${PR_OWNER}/${COMPONENT_NAME}/config/default?ref=${PR_SHA}\"" "$KUSTOMIZATION_PATH"
          yq -i e "(.resources[] | select(. ==\"*github.com/konflux-ci/${COMPONENT_NAME}/config/snapshotgc*\")) |= \"https://github.com/${PR_OWNER}/${COMPONENT_NAME}/config/snapshotgc?ref=${PR_SHA}\"" "$KUSTOMIZATION_PATH"
        fi

    - name: deploy
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      script: |
        #!/bin/bash
        set -euo pipefail

        kubectl cluster-info

        echo "[INFO] Installing Konflux CI dependencies"
        ./deploy-deps.sh
        ./wait-for-all.sh

        echo "[INFO] Installing Konflux CI..."
        ./deploy-konflux.sh

        kubectl get po -A

    - name: create-test-resources
      image: quay.io/konflux-ci/tekton-integration-catalog/utils:latest
      workingDir: /var/workdir
      when:
        - input: "$(params.create-test-resources)"
          operator: in
          values: ["true"]
      script: |
        #!/bin/bash
        set -euo pipefail

        echo "[INFO] Applying Kyverno to reduce resources for testing"
        kubectl apply -f ./dependencies/kyverno/policy/e2e-reduce-resources.yaml

        echo "[INFO] Creating Test Resources..."
        ./deploy-test-resources.sh

