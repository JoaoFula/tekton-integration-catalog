---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: pull-request-commenter
spec:
  params:
    - name: test-name
      type: string
      description: The name of the pipelinerun.
    - name: oci-container
      type: string
      description: The ORAS container registry URI to store artifacts.
    - name: pull-request-author
      type: string
      description: The GitHub username of the pull request author.
    - name: pull-request-number
      type: string
      description: The number of the GitHub pull request.
    - name: git-repo
      type: string
      description: The name of the GitHub repository.
    - name: git-org
      type: string
      description: The GitHub organization or user that owns the repository.
    - name: pipeline-aggregate-status
      type: string
      description: Contains status of a pipeline(Succeeded, Failed, Completed, None)
      default: None
    - name: git-revision
      type: string
      description: "Git commit revision from Snapshot."
  volumes:
    - name: konflux-test-infra-volume
      secret:
        secretName: konflux-test-infra
  steps:
    - name: pull-request-comment
      env:
        - name: BUILD_CONSOLE_URL
          valueFrom:
            fieldRef:
              fieldPath: metadata.annotations['pac.test.appstudio.openshift.io/log-url']
      workingDir: /workspace
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name:  konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      script: |
        #!/bin/sh

        export TEST_NAME="$(params.test-name)"
        export PR_AUTHOR="$(params.pull-request-author)"
        export OCI_STORAGE_CONTAINER="$(params.oci-container)"
        export GIT_ORG="$(params.git-org)"
        export GIT_REPO="$(params.git-repo)"
        export PR_NUMBER="$(params.pull-request-number)"
        export PIPELINE_RUN_AGGREGATE_STATUS="$(params.pipeline-aggregate-status)"

        GITHUB_TOKEN="$(cat /usr/local/konflux-test-infra/github-bot-commenter-token)"
        if [ -z "$GITHUB_TOKEN" ]; then
            echo "Error: GITHUB_TOKEN env is not set."
            exit 1
        fi

        # Get the authenticated user's login
        USER_LOGIN=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/user" | jq -r '.login')

        if [ -z "$USER_LOGIN" ]; then
            echo "[ERROR] Unable to retrieve user login."
            exit 1
        fi

        # Get all comments on the pull request
        COMMENTS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/$PR_NUMBER/comments")

        # Find and delete any existing comments by the authenticated user
        COMMENT_IDS=$(echo "$COMMENTS" | jq -r --arg USER_LOGIN "$USER_LOGIN" '.[] | select(.user.login == $USER_LOGIN) | .id')
        for COMMENT_ID in $COMMENT_IDS; do
            DELETE_RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -X DELETE \
                "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/comments/$COMMENT_ID")

            if [ -z "$DELETE_RESPONSE" ]; then
                echo "[INFO] Existing comment with ID $COMMENT_ID by $USER_LOGIN deleted successfully."
            else
                echo "[ERROR] Failed to delete comment with ID $COMMENT_ID. Response: $DELETE_RESPONSE"
            fi
        done

        # If the pipeline succeeded, do not post a new comment and exit
        if [[ "$PIPELINE_RUN_AGGREGATE_STATUS" == "Succeeded" ]]; then
            echo "[INFO]: Pipeline finished successfully. No new comment will be posted."
            exit 0
        fi

        export INTEGRATION_TEST_CONSOLE_URL="${BUILD_CONSOLE_URL%/*}/$(params.test-name)"

        BODY_HEADER="@${PR_AUTHOR}: The following test has ${PIPELINE_RUN_AGGREGATE_STATUS}, say **/retest** to rerun failed tests.\n\n"
        BODY_TEST_SUMMARY="| PipelineRun Name | Status | Rerun command | Build Log | Test Log |\n|------------------|--------|---------|-------------------|------------------|\n| \`$TEST_NAME\`    | **$PIPELINE_RUN_AGGREGATE_STATUS** | \`/retest\` | [View Pipeline Log]($BUILD_CONSOLE_URL) | [View Test Logs]($INTEGRATION_TEST_CONSOLE_URL) |\n\n"
        BODY_ARTIFACTS="### Inspecting Test Artifacts\nTo inspect your test artifacts, follow these steps:\n\n1. Install **ORAS** (see the [ORAS installation guide](https://oras.land/docs/installation)).\n2. Download artifacts with the following commands:\n\n\`\`\`sh\nmkdir -p oras-artifacts\ncd oras-artifacts\noras pull $OCI_STORAGE_CONTAINER\n\`\`\`\n\n"

        # Combine body components into the final JSON body
        COMMENT=$(cat <<EOF
        {
          "body": "${BODY_HEADER}${BODY_TEST_SUMMARY}${BODY_ARTIFACTS}"
        }
        EOF
        )

        # Post the comment to GitHub
        RESPONSE=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$COMMENT" \
            "https://api.github.com/repos/$GIT_ORG/$GIT_REPO/issues/$PR_NUMBER/comments")

        # Check if the comment was posted successfully
        if echo "$RESPONSE" | grep -q '"id"'; then
            echo "[INFO] Comment posted successfully."
        else
            echo "[ERROR] Failed to post comment. Response: $RESPONSE"
        fi
