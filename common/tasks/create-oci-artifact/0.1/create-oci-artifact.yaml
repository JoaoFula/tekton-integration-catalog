---
apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: create-oci-container
spec:
  description: |-
    This task creates an OCI container in a Quay.io repository to store test artifacts generated during a pipeline run.
    The container is tagged using a unique identifier, typically derived from the pipeline run name, to ensure that
    each container is distinct. The task supports setting an expiration date for the container to automatically delete
    it from Quay.io after a specified duration, ensuring storage hygiene.
  params:
    - name: oci-container-tag
      type: string
      description: |
        The tag to be applied to the OCI container. This typically corresponds to the name of the test being executed or the pipeline run,
        allowing the container to be easily identified and associated with specific test results or artifacts.
    - name: oci-container-repo
      type: string
      description: |
        The base Quay.io repository where the OCI container will be stored.
        This repository serves as the storage location for the container, and the container will be tagged according to the specified test or pipeline run name.
    - name: oci-container-expiration
      type: string
      default: 1y
      description: |
        The time duration after which the OCI container will automatically expire and be deleted from Quay.io.
        This parameter helps manage storage costs and data retention by setting a lifespan for the container.
        The default expiration period is one year.
  results:
    - name: oci-container
      description: |
        The fully qualified name (including the repository and tag) of the OCI container created to store test artifacts.
        This container is generated from a specified Quay.io repository and tagged uniquely, usually with the test name or pipeline run name,
        ensuring that each container is distinct and traceable.
  volumes:
    - name: konflux-test-infra-volume
      secret:
        secretName: konflux-test-infra
  steps:
    - name: create-oci-container
      image: quay.io/konflux-qe-incubator/konflux-qe-tools:latest
      volumeMounts:
        - name: konflux-test-infra-volume
          mountPath: /usr/local/konflux-test-infra
      workingDir: /workspace
      script: |
        #!/bin/bash

        # Export OCI storage credentials and container details
        OCI_STORAGE_USERNAME="$(jq -r '."quay-username"' /usr/local/konflux-test-infra/oci-storage)"
        OCI_STORAGE_TOKEN="$(jq -r '."quay-token"' /usr/local/konflux-test-infra/oci-storage)"
        OCI_STORAGE_CONTAINER="$(params.oci-container-repo):$(params.oci-container-tag)"
        TEMP_ANNOTATION_FILE="$(mktemp)"

        # Log and save the container name
        echo "[INFO] OCI_STORAGE_CONTAINER: ${OCI_STORAGE_CONTAINER}"
        echo -n "${OCI_STORAGE_CONTAINER}" > "$(results.oci-container.path)"

        # Create the annotations file. By default, Quay expiration container will be 1 year
        jq -n --arg exp "$(params.oci-container-expiration)" --arg title "Artifact storage for pipelinerun: $(params.oci-container-tag)" \
          '{"$manifest": {"quay.expires-after": $exp, "org.opencontainers.image.title": $title}}' > "${TEMP_ANNOTATION_FILE}"

        # Push the container to OCI registry. Retry up to 5 times in case of failure
        for i in {1..5}; do
            if oras push "${OCI_STORAGE_CONTAINER}" --username="${OCI_STORAGE_USERNAME}" --password="${OCI_STORAGE_TOKEN}" \
                --config /dev/null:application/vnd.oras.config.v1+json --annotation-file "${TEMP_ANNOTATION_FILE}"; then
                echo "[INFO] oras push succeeded on attempt $i."
                break
            else
                echo "[WARNING] oras push failed on attempt $i. Retrying..."
                sleep 5
            fi
        done

        # Exit with error if all attempts fail
        if [ $i -eq 5 ]; then
            echo "[ERROR] oras push failed after 5 attempts."
            exit 1
        fi
