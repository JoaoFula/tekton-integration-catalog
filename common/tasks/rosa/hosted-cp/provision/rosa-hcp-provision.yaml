  apiVersion: tekton.dev/v1
  kind: Task
  metadata:
    name: rosa-hcp
  spec:
    results:
      - name: cluster-name
        description: ""
      - name: ocp-login-command
        description: ""
    params:
      - name: test-id
        type: string
      - name: test-name
        type: string
      - name: ocp-version
        type: string
    steps:
      - name: rosa-provision
        image: quay.io/konflux-qe-incubator/konflux-qe-tools@sha256:ad94717d69e5d192a92b0b9b6cda4223940303f4ff297ea2b69e7cddb94ff7d5
        workingDir: /workspace
        env:
          - name: TEST_ID
            value: $(params.test-id)
          - name: TEST_NAME
            value: $(params.test-name)
          - name: ROSA_TOKEN
            valueFrom:
              secretKeyRef:
                name: rosa-token
                key: token
          - name: AWS_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: aws-access-key
          - name: AWS_ACCESS_SECRET
            valueFrom:
              secretKeyRef:
                name: aws-credentials
                key: aws-access-secret
          - name: CLUSTER_ADMIN_PASSWORD
            valueFrom:
              secretKeyRef:
                name: cluster-admin-password
                key: password
        script: |
          #!/bin/sh        
          export CLUSTER_NAME="kx-ci-$(head /dev/urandom | tr -dc 'a-z0-9' | head -c 6)"
          echo $CLUSTER_NAME > $(results.cluster-name.path)

          # Configure AWS creds
          aws configure set aws_access_key_id "${AWS_ACCESS_KEY}"
          aws configure set aws_secret_access_key "${AWS_ACCESS_SECRET}"
          aws configure set region us-east-2
          aws ec2 describe-instances
          
          echo -e "INFO: Logging in to ROSA"
          rosa login --token="${ROSA_TOKEN}"
          
          echo -e "INFO: Creating account roles for ROSA cluster with hosted control plane (HyperShift)"
          rosa create account-roles --hosted-cp --mode auto
          echo -e "INFO: Starting installation of ROSA cluster with hosted control plane (HyperShift)"
          rosa create cluster \
            --cluster-name $CLUSTER_NAME \
            --compute-machine-type m5.xlarge \
            --hosted-cp \
            --mode auto \
            --oidc-config-id 2b6g96db17bbq2top4fa41dbonulktrr \
            --region us-west-2 \
            --replicas 3 \
            --sts \
            --subnet-ids subnet-064432532737498e1,subnet-0903d07ec60d30544 \
            --tags konflux-ci:true,namespace:$(context.taskRun.namespace),cluster-type:rosa
          
          echo -e "INFO: Waiting until ROSA cluster installation is finished"
          rosa logs install --cluster $CLUSTER_NAME --watch
          
          # Generate a new password, use prefix Xy0 so that it passes password checks every time
          ADMIN_PASSWORD="Xy0$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 14 ; echo '')"
          
          echo -e "INFO: Creating an admin account..."
          rosa create admin --cluster $CLUSTER_NAME -p $ADMIN_PASSWORD
          mkdir auth
          
          echo -e "INFO: Creating an identity provider"
          
          # Store namespace name, api-url and login-command in a file
          echo -n "$(context.taskRun.namespace)" > namespace
          rosa describe cluster -c $CLUSTER_NAME -o json | jq -r '.api.url' > auth/api-url
          
          # It takes a while for cluster-admin role to be applied on cluster
          echo "INFO: Waiting 120s for identity provider to be updated on cluster"
          sleep 120
          echo -e "INFO: Storing login command"
          echo -n "oc login -u cluster-admin -p $ADMIN_PASSWORD $(cat auth/api-url)" > login-command

          cat login-command > $(results.ocp-login-command.path)

          CLUSTER_TIMEOUT=1500
          start_time=$(date +"%s")

          while true; do
            sleep 60
            CLUSTER_STATE=$(rosa describe cluster -c "${CLUSTER_NAME}" -o json | jq -r '.state')
            echo "Cluster state: ${CLUSTER_STATE}"

            if [[ "${CLUSTER_STATE}" == "ready" ]]; then
              echo "Cluster is reported as ready"
              break
            fi

            if (( $(date +"%s") - $start_time >= $CLUSTER_TIMEOUT )); then
              echo "error: Timed out while waiting for cluster to be ready"
              exit 1
            fi

            if [[ "${CLUSTER_STATE}" != "installing" && "${CLUSTER_STATE}" != "pending" && "${CLUSTER_STATE}" != "waiting" && "${CLUSTER_STATE}" != "validating" ]]; then
              rosa logs install -c ${CLUSTER_ID} > "${CLUSTER_INSTALL_LOG}" || echo "error: Unable to pull installation log."
              echo "error: Cluster reported invalid state: ${CLUSTER_STATE}"
              exit 1
            fi
          done

          $(cat login-command)
          oc wait clusteroperator console --for=condition=Available --timeout=30m
